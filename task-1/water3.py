def initial_state():
    return (8, 0, 0)

def is_goal(s):
    if s[0] == 4 and s[1] == 4:
        return True
    else:
        return False

def successors(s):
    if s[0] == 8:
        return [[(3,5,0),5],[(5,0,3),3]] #(8,0,0)
    if s[0] == 3 and s[1] == 5:
        return [[(0,5,3),3],[(3,2,3),3]] #(3,5,0)
    if s[0] == 5 and s[2] == 3:
        return [[(0,5,3),5],[(5,3,0),3]] #(5,0,3)
    if s[1] == 5 and s[2] == 3:
        return [[(3,5,0),3],[(5,0,3),5]] #(0,5,3)
    if s[0] == 3 and s[1] == 2 and s[2] == 3:
        return [[(0,5,3),3],[(5,0,3),2],[(6,2,0),3],[(3,5,0),3]] #(3,2,3)
    if s[0] == 6 and s[1] == 2:
        return [[(3,5,0),3],[(3,2,3),3],[(8,0,0),2],[(6,0,2),2]] #(6,2,0)
    if s[0] == 6 and s[2] == 2:
        return [[(1,5,2),5],[(5,0,3),1],[(8,0,0),2],[(6,2,0),2]] #(6,0,2)
    if s[0] == 1 and s[1] == 5 and s[2] == 2:
        return [[(0,5,3),1],[(6,0,2),6],[(1,4,3),1],[(3,5,0),2]] #(1,5,2)
    if s[0] == 1 and s[1] == 4 and s[2] == 3:
        return [[(0,5,3),1],[(5,0,3),4],[(4,4,0),3],[(1,5,2),1]] #(1,4,3)
    if s[0] == 4 and s[1] == 4:
        return [[(3,5,0),1],[(1,4,3),3],[(8,0,0),4],[(4,1,3),3]] #(4,4,0)
    if s[0] == 4 and s[1] == 1 and s[2] == 3:
        return [[(0,5,3),4],[(5,0,3),1],[(7,1,0),3],[(4,4,0),3]] #(4,1,3)
    if s[0] == 7 and s[1] == 1:
        return [[(3,5,0),4],[(4,1,3),3],[(8,0,0),1],[(7,0,1),1]] #(7,1,0)
    if s[0] == 7 and s[2] == 1:
        return [[(2,5,1),5],[(5,0,3),2],[(8,0,0),1],[(7,1,0),1]] #(7,0,1)
    if s[0] == 2 and s[1] == 5 and s[2] == 1:
        return [[(0,5,3),2],[(7,0,1),5],[(2,3,3),2],[(3,5,0),1]] #(2,5,1)
    if s[0] == 2 and s[1] == 3 and s[2] == 3:
        return [[(0,5,3),2],[(5,0,3),3],[(5,3,0),3],[(2,5,1),2]] #(2,3,3)
    if s[0] == 5 and s[1] == 3:
        return [[(3,5,0),2],[(2,3,3),3],[(8,0,0),3],[(5,0,3),3]] #(5,3,0)
    return []
